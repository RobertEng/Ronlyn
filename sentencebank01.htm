<!DOCTYPE html>
<html>
<head>
<style>
:root {
  --columns:8;  // number of columns for grid
  --grid-column-repeat: repeat(6, auto);
  --button-background-color: #69c773;
}
body {
  margin: 0px;
//  padding: 0;
//  height: 100%;
  overflow: hidden;
//  max-height: 100%;
}
h1 {
  font-family: arial;
  font-size: 100%;
}
h2 {
  font-family: arial;
  font-size: 90%;
}
.box {
  background-color: var(--button-background-color);
  color: black;
  border-radius: 3px;
  padding: 0.5rem 0.8em;
  font-family: arial;
  -webkit-font-smoothing: antialiased;
  font-weight: bold;
  font-size: 85%;
  text-align: center;
  resize: horizontal;
  min-width:50px;
}

.box:hover, button:focus {
  opacity: 0.75;
  cursor: pointer;
}
.box.disabled {
    pointer-events: none;
    text-decoration: none;
}
//.box:nth-child(even) {
//  background-color:  var(--button-background-color);
//  color: #000;
//}
.wrapper,  .wrapper1  .wrapper2, .wrapper3, .wrapper6, .wrapper8 {
  display: grid;
  grid-gap: 5px;
  resize: horizontal;
}
.wrapper8 {
  grid-template-columns: repeat(8, auto);
}
@media only screen and (max-width: 640px) {
.wrapper8 {
  grid-template-columns: repeat(6, auto);
}}
.wrapper6 {
  grid-template-columns: repeat(6, auto);
}
.wrapper3 {
  grid-template-columns: repeat(3, auto);
}
.wrapper2 {
  grid-template-columns: repeat(2, auto);
}
.wrapper1 {
  width: 150px;
  grid-row-gap: 15px;
  grid-template-columns: repeat(1,auto);
}
.ul
{
  font-weight: bold;
  font-family: arial;
  }
.navbar-li
{
  padding: 10px;
}
.navbar-list:hover, button:focus {
  opacity: 0.75;
  cursor: pointer;
}
/*
.navbar-list:active {
  cursor: pointer;
}
.navbar-li:active {
  background-color: red;
  cursor: pointer;
}
*/
.navbar-li:nth-child(even) {
  background: white;
}
/*
 * page "frame" definitions
 */
#header { <!-- single element id="header"-->
  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
  -moz-box-sizing: border-box;    /* Firefox, other Gecko */
  box-sizing: border-box;         /* Opera/IE 8+ */
   position: absolute;
   top:0;
   left:0px;
   padding-left: 10px;
   padding-right: 10px;
   grid-gap: 0px;
   width:100%;
   height: 40px;
   overflow: hidden; /* Disables scrollbars on the navigation frame. To enable scrollbars, change "hidden" to "scroll" */
   background: #ccc;
 }

 .headertitle {
   font-family: arial;
   font-weight:bold;
   font-size:110%;
   height: inherit;
   display: inline-block;
   line-height:40px;
 }
 .headertitle:hover, button:focus {
   opacity: 0.75;
   cursor: pointer;
 }
 .headertitle.disabled {
     pointer-events: none;
     text-decoration: none;
 }
.headercontrols {
  font-family: arial;
  font-size: 80%;
}
[class*='col-1'] { /*selector matches every class whose attr contains col-*/
  float:left;
  }
.col-1-2 {
    width:50%;
  }
#nav {
  -webkit-tap-highlight-color: transparent;
  -webkit-backface-visibility: hidden;
  position: absolute;
  top: 40px;
  bottom: 0;
  left: 0;
  width: 150px; /* Width of navigation frame */
  overflow: hidden; /* Disables scrollbars on the navigation frame. To enable scrollbars, change "hidden" to "scroll" */
  background: #eee;
}
main {
  position: fixed;
  top: 40px;
  left: 150px; /* Set this to the width of the navigation frame */
  right: 0;
  bottom: 0;
  overflow: auto;
  background: #fff;
  margin-left: 10px;
}

.word-in-sentence:hover {
  cursor:pointer;
  color:green;
}
.noselect {
  -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
     -khtml-user-select: none; /* Konqueror HTML */
       -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome and Opera */
}
}
</style>
</head>
<title>Ronlyn's (Text-To-Speech) Sentence Bank</title>
<body>
<header>
  <div class="grid" id="header">
    <div class="col-1-2 headertitle" XSAMPA="Ronlyns Text To Speech word bank">
       <span>Ronlyn's Text-to-Speech (TTS) Sentence Bank</span>
    </div>
    <div class="col-1-2 headercontrols">
       <div class="option" align="right">
          <label for="volume">Volume</label>
          <input type="range" min="0" max="1" step="0.1" name="volume" id="volume" value="1">
       </div>
     </div>
  </div>
</header>
<main>
<meta name="format-detection" content="telephone=no"> <!-- disable iOS autoformat of telephone# -->

<h1><a class="navbar-item" id="Common Sentences">test sentences</a></h1>

<div class="speak-sentence">

  <div class="speak-sentence-onclick">
    <span class="noselect word-in-sentence speak-onclick" id="the">the</span>
    <span class="noselect word-in-sentence speak-onclick" id="quick">quick</span>
     <span class="noselect word-in-sentence speak-onclick" id="brown">brown</span>
     <span class="noselect word-in-sentence speak-onclick" id="fox">fox</span>
     <span class="noselect word-in-sentence speak-onclick" id="jumped">jumped</span>
     <span class="noselect word-in-sentence speak-onclick" id="over">over</span>
     <span class="noselect word-in-sentence speak-onclick" id="the">the</span>
     <span class="noselect word-in-sentence speak-onclick" id="lazy">lazy</span>
     <span class="noselect word-in-sentence speak-onclick" id="dog">dog</span>
</div>



<h1><a class="navbar-item" id="Common Sentences">Common Sentences</a></h1>
<h1><a class="navbar-item" id="greetings">Greetings</a></h1>

<div class="wrapper8">
  <div class="box speak-onclick">Hi.</div>
  <div class="box speak-onclick">Hello.</div>
  <div class="box speak-onclick">My name is Ronlyn.</div>
</div>
<p id="os-msg"></p>
<p id="browser-msg"></p>

<div class="option">
   <label for="voice">Voice</label>
   <select name="voice" id="voice"></select>
</div>

</main>

<nav>
  <nav id="nav">
    <!--div class="innertube"-->
<!--      <div class="wrapper1"> -->
<!--        <div class="list-of-anchors-container"> -->
      <div onclick="" class="navbar-list ul">
        <div onclick="" id="navbar-items">
      </div>
    </div>
  </nav>
</nav>
</body>
<script>

/***
 *
 * Event Listeners
 *
 ***/

 /*
  * onclick
  */
document.body.onclick = function(e) {   //when the document body is clicked
    if (window.event) {
        e = event.srcElement; }          //assign the element clicked to e (IE 6-8)
    else {
        e = e.target; }                  //assign the element clicked to e

    if (e.className) {
      if (e.className.indexOf('speak-onclick') != -1) { //should use switch
        spelling = e.getAttribute("XSAMPA");
         if (!spelling) {
           spelling = e.innerHTML
         }
         speak(spelling);
      }
      else if (e.className.indexOf('onclick') != -1
        && e.className.indexOf('onclick-href') != -1) { //need an additional conditional here
        speak(e.innerHTML);
        window.location.href = "#"+e.id; } //goto anchor

      else if (e.className.indexOf('href-onclick') != -1) {
//        window.location.href = "#"+e.innerHTML;  //goto anchor
         alert("oops href-onclick");
        window.location.href = "#"+e.id; } //goto anchor

      else if (e.className.indexOf('headertitle') != -1) {
        spelling = e.getAttribute("XSAMPA");
        if (!spelling) {
          spelling = e.innerHTML;
        }
        speak(spelling);
      }
      else {
         speak("choose again") }
       }
    } //onclick
/*
 * onload
 */
document.body.onload = function(e) {   //when the document body is clicked

  populateNavbar();
}
/***
 *
 * global variables
 *
 ***/
var gridWidth = 8;
var button = document.getElementById('speak');
var speechMsgInput = document.getElementById('speech-msg');
var volumeInput = document.getElementById('volume');
var voiceSelect = document.getElementById('voice');
/***
 *
 * Function definitions
 *
 ***/

/*
 * getOS
 */
function getOS() {
   var userAgent = window.navigator.userAgent,
   platform = window.navigator.platform,
   macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
   windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
   iosPlatforms = ['iPhone', 'iPad', 'iPod'],
   os = null; // initalize string

   if (macosPlatforms.indexOf(platform) !== -1) {
      os = 'Mac OS'; }
   else if (iosPlatforms.indexOf(platform) !== -1) {
      os = 'iOS'; }
   else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = 'Windows'; }
   else if (/Android/.test(userAgent)) {
      os = 'Android'; }
   else if (!os && /Linux/.test(platform)) {
      os = 'Linux'; }
   return os;
}
/*
 * Populate list of navbar items.
 */
function populateNavbar() {

    navbarList = document.getElementById('navbar-items');

    //scan main for <h1> to build navbar
    //get main element some day
    var navbarItemList = document.getElementsByClassName("navbar-item"); // from <h1>
    for (var i = 0; i < navbarItemList.length; i++) {
      var div = document.createElement('div'); // var forces creation of new tr
      div.className = "navbar-li li onclick-href";
      div.id = navbarItemList[i].id;
      div.onclick ="";  //kludge for iOS
      div.innerHTML = navbarItemList[i].innerHTML;
      navbarList.append(div);
    }
} // populateNavbar

/*
 * Populate list of voices.
 */
function populateVoices(defaultVoice) {
   // Fetch the available voices.
   var voices = speechSynthesis.getVoices();
   var option;
   // Loop through each of the voices.
   voices.forEach(function(voice, i) {
      // Create a new option element.

      // Set the options value and text.
      option = document.createElement('option');
      option.value = voice.name;
      option.innerHTML = voice.name;
      option.selected = (voice.name == defaultVoice);
      // Add the option to the voice selector.
      voiceSelect.appendChild(option);
   });
}
/*
 * Speak
 */

function wordSpeak(button) {
   speak(button.value);
} // function wordSpeak
/*
 * Speak
 */
function speak(text, callback) {
   var msg = new SpeechSynthesisUtterance('default');
   msg.text = text;
   msg.volume = parseFloat(volumeInput.value);
   msg.lang = 'en-US';
   msg.rate = 1;
   msg.pitch = 1;
   if (voiceSelect.value) {
      msg.voice = speechSynthesis.getVoices().filter(function(voice) { return voice.name == voiceSelect.value; })[0];
	}
    msg.onend = function () {
        if (callback) {
            callback();
        }
    };

    msg.onerror = function (e) {
        if (callback) {
            callback(e);
        }
    };
    window.speechSynthesis.speak(msg);
} // function speak

/***
 *
 * Initialize page
 *
 ***/

/*
 * Check browser support for speech synthesis
 */
var supportMsg = document.getElementById('browser-msg');

if ('speechSynthesis' in window) {
	supportMsg.innerHTML = 'Your browser <strong>supports</strong> speech synthesis.';
} else {
	supportMsg.innerHTML = 'Sorry your browser <strong>does not support</strong> speech synthesis.'
        + 'Try again with another browser.';
	supportMsg.classList.add('not-supported');
	// remove all speak buttons
}
var osMsg = document.getElementById('os-msg');
var os = getOS();
if (os == 'iOS') {
   defaultVoice = "Fred"; }
else {
   defaultVoice = "Microsoft Zira Desktop - English (United States)"; }

osMsg.innerHTML = 'You are running on <strong>'+os+'</strong> operating system.';

populateVoices(defaultVoice);

// Chrome loads voices asynchronously.
window.speechSynthesis.onvoiceschanged = function(e) {
  populateVoices('Microsoft Zira Desktop - English (United States)');
};

</script>
</html>
